---
#- name: update cassandra conf files
#  template: 
#    src: '{{ item.src }}'
#    dest: '{{ item.dest }}'
#  loop:
#    - { src: cassandra.yaml.j2, dest: /etc/cassandra/cassandra.yaml }
#    - { src: jvm-server.options.j2, dest: /etc/cassandra/jvm-server.options }
#    - { src: jvm11-server.options.j2, dest: /etc/cassandra/jvm11-server.options }
#    - { src: jvm11-clients.options.j2, dest: /etc/cassandra/jvm11-clients.options }

# this needs to be a variable for the dir only.
- name: creating cassandra config backup
  copy:
    #src: "{{ cassandra_config }}"
    src: "/etc/cassandra/cassandra.yaml"
    #dest: "{{ cassandra_config }}.bak"
    dest: "/etc/cassandra/cassandra.yaml.bak"
    remote_src: yes
    owner: cassandra
    group: cassandra
    mode: '0644'

# we can use the entire long version of the config. That might be better for exaplaining what's on there.
# parsing through the short version to make sure the correct opts are there.
# note to self. Long config is better. Leaving as is and removing cass_short upon cleanup
- name: update cassandra config
  template:
    src: 'templates/cassandra.yaml.j2'
    dest: '/etc/cassandra/cassandra.yaml'
  loop: "{{ groups['cassandra_cluster'] }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop_control:
    index_var: count

# audit to see if we need this.
# this is default with the install. we don't need

#- name: moving over other jvm files
#  copy:
#    src: '{{ item.src }}'
#    dest: '{{ item.dest }}'
#  loop:
#    - { src: files/jvm-server.options.j2, dest: /etc/cassandra/jvm-server.options }
#    - { src: files/jvm11-server.options.j2, dest: /etc/cassandra/jvm11-server.options }
#    - { src: files/jvm11-clients.options.j2, dest: /etc/cassandra/jvm11-clients.options }    

# die for dbg
#- name: dbg me
#  fail:
#    msg: 'killing for debug'
#  run_once: true
#  delegate_to: localhost

#- name: update data center for node


# removes sample data
#- name: remove cassandra data directory 
#  file:
#    path: /var/lib/cassandra/
#    state: absent

#- name: recreate /var/lib/cassandra directory
#  file:
#    path: /var/lib/cassandra
#    state: directory
#    owner: cassandra
#    group: cassandra
#    mode: '0755'

#- name: database user secret
#  set_fact:
#    db_password: "{{ lookup('password', '/dev/null length=25 chars=ascii_letters,digits') }}"
#    cachable: true
#  no_log: true
#  run_once: true
#  delegate_to: "{{ groups['cassandra_cluster'][0] }}"

# we can put this in defaults
- name: create cassandra hidden directory
  file:
    path: /root/.cassandra
    state: directory
    mode: "0700"

- name: create conf files in cassandra hidden dir
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: '0600'
  loop: 
    - { src: cqlsh.j2, dest: /root/.cassandra/cqlshrc }
    - { src: credentials.j2, dest: /root/.cassandra/cqlshrc }
  notify: restart cassandra

# we never started the db again
- name: start cassandra
  systemd: 
    name: cassandra
    state: started

- name: check nodetool status on each cassandra node
  command: nodetool status
  register: nodetool_output
  retries: 10 
  delay: 20  
  until: >
    (nodetool_output.stdout | regex_findall('UN') | length) >= cluster_count

- name: add superuser to db
  command: >
    cqlsh {{ cassandra_data.server[0].instance.ip_priv1 }}:9042 -u cassandra -p cassandra -e "CREATE ROLE {{ db_user }} WITH SUPERUSER = true AND LOGIN = true AND PASSWORD = '{{ db_password }}';"
  run_once: true
  delegate_to: "{{ groups['cassandra_servers'][0] }}"

- name: alter default user
  command: >
    cqlsh {{ cassandra_data.server[0].instance.ip_priv1 }}:9042 -u {{ db_user }} -p {{ db_password }} -e "ALTER ROLE cassandra WITH SUPERUSER = false AND LOGIN = false;"
  run_once: true
  delegate_to: "{{ groups['cassandra_servers'][0] }}"  
  notify: restart cassandra