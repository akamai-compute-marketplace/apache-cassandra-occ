---
# create cluster ssl dir

- name: create ssl directory
  file:
    path: /etc/cassandra/ssl
    state: directory
    owner: cassandra
    group: cassandra
    mode: 0755

# create root ca for signing
- name: generate ca key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_cakey }}'
    passphrase: '{{ ca_password }}'
    cipher: auto
    return_content: true
    owner: cassandra
    group: cassandra
  no_log: true
  register: ca_key
  run_once: true
  delegate_to: localhost

- name: generate ca csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_cacsr }}'
    privatekey_path: '{{ cassandra_cakey }}'
    privatekey_passphrase: '{{ ca_password }}'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ ca_common_name }}'
    use_common_name_for_san: false
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
    key_usage_critical: true
    owner: cassandra
    group: cassandra
  register: ca_csr
  run_once: true
  delegate_to: localhost

- name: generate ca crt
  community.crypto.x509_certificate:
    path: '{{ cassandra_cacert }}'
    privatekey_path: '{{ cassandra_cakey }}'
    privatekey_passphrase: '{{ ca_password }}'
    csr_path: '{{ cassandra_cacsr }}'
    selfsigned_not_after: +3650d
    provider: selfsigned
    owner: cassandra
    group: cassandra
    mode: '0640'
    return_content: true
  register: ca_crt
  run_once: true
  delegate_to: localhost

# gen ssl keys

- name: generate server key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.key'
    owner: cassandra
    group: cassandra
    mode: '0600'
    return_content: true
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_ssl_path }}client{{ item }}.key'
    owner: cassandra
    group: cassandra
    mode: '0600'
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: generate internal client key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.key'
    owner: cassandra
    group: cassandra
    mode: '0600'
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# gen csrs

- name: generate server csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.csr'
    privatekey_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ cassandra_data.results[count].instance.hostname }}'
    use_common_name_for_san: false
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_ssl_path }}client{{ item }}.csr'
    privatekey_path: '{{ cassandra_ssl_path }}client{{ item }}.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: 'client{{ item }}'
    use_common_name_for_san: false
    owner: cassandra
    group: cassandra    
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: generate internal client csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.csr'
    privatekey_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ cassandra_data.results[count].instance.hostname }}client'
    use_common_name_for_san: false
    owner: cassandra
    group: cassandra    
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# sign cert with ca and get client cert

- name: generate server cert signed with ca cert
  community.crypto.x509_certificate:
    path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.crt'
    privatekey_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.key'
    csr_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.csr'
    ownca_content: '{{ ca_crt.certificate }}'
    ownca_privatekey_content: '{{ ca_key.privatekey }}'
    ownca_privatekey_passphrase: '{{ ca_password }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: cassandra
    group: cassandra
    mode: '0640'
    return_content: true
  register: server_certs
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client cert signed with ca cert
  community.crypto.x509_certificate:
    path: '{{ cassandra_ssl_path }}client{{ item }}.crt'
    privatekey_path: '{{ cassandra_ssl_path }}client{{ item }}.key'
    csr_path: '{{ cassandra_ssl_path }}client{{ item }}.csr'
    ownca_path: '{{ cassandra_cacert }}'
    ownca_privatekey_path: '{{ cassandra_cakey }}'
    ownca_privatekey_passphrase: '{{ ca_password }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: cassandra
    group: cassandra
    mode: '0640'
    return_content: true
  register: client_certs
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: generate internal client cert signed with ca cert
  community.crypto.x509_certificate:
    path: '{{ cassandra_ssl_path }}/{{ cassandra_data.results[count].instance.hostname }}client.crt'
    privatekey_path: '{{ cassandra_ssl_path }}/{{ cassandra_data.results[count].instance.hostname }}client.key'
    csr_path: '{{ cassandra_ssl_path }}/{{ cassandra_data.results[count].instance.hostname }}client.csr'
    ownca_content: '{{ ca_crt.certificate }}'
    ownca_privatekey_content: '{{ ca_key.privatekey }}'
    ownca_privatekey_passphrase: '{{ ca_password }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: cassandra
    group: cassandra
    mode: '0640'
    return_content: true
  register: internal_client_certs
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# generate pkcs12 file from cert keypair

- name: create server pcks12 file from
  community.crypto.openssl_pkcs12:
    path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.keystore.jks'
    friendly_name: '{{ cassandra_data.results[count].instance.hostname }}'
    privatekey_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.key'
    certificate_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.crt'
    passphrase: '{{ keystore_password }}'
    action: export
    state: present
    owner: cassandra
    group: cassandra    
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count    

- name: create client pcks12 file from
  community.crypto.openssl_pkcs12:
    path: '{{ cassandra_ssl_path }}client{{ item }}.keystore.jks'
    friendly_name: 'client{{ item }}'
    privatekey_path: '{{ cassandra_ssl_path }}client{{ item }}.key'
    certificate_path: '{{ cassandra_ssl_path }}client{{ item }}.crt'
    passphrase: '{{ keystore_password }}'
    action: export
    state: present
    owner: cassandra
    group: cassandra    
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: create internal client pcks12 file from
  community.crypto.openssl_pkcs12:
    path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.keystore.jks'
    friendly_name: '{{ cassandra_data.results[count].instance.hostname }}client'
    privatekey_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.key'
    certificate_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.crt'
    passphrase: '{{ keystore_password }}'
    action: export
    state: present
    owner: cassandra
    group: cassandra    
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count 

# Add keypairs to keystores
- name: add keypair
  command: >
    openssl pkcs12 -export -out 
    '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.keystore.jks'
    -inkey '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.key'
    -in '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.crt'
    -passin pass:{{ keystore_password }} 
    -passout pass:{{ keystore_password }}
  args: 
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: add keypair clients
  command: >
    openssl pkcs12 -export -out 
    '{{ cassandra_ssl_path }}client{{ item }}.keystore.jks'
    -inkey '{{ cassandra_ssl_path }}client{{ item }}.key'
    -in '{{ cassandra_ssl_path }}client{{ item }}.crt'
    -passin pass:{{ keystore_password }} 
    -passout pass:{{ keystore_password }}
  args: 
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  with_sequence: count="{{ client_count }}"
  delegate_to: localhost

- name: add keypair internal
  command: >
    openssl pkcs12 -export -out 
    '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.keystore.jks'
    -inkey '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.key'
    -in '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.crt'
    -passin pass:{{ keystore_password }} 
    -passout pass:{{ keystore_password }}
  args: 
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# import rootca into keystore
- name: add rootca to keystores
  community.general.java_cert:
    cert_content: '{{ ca_crt.certificate }}'
    keystore_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}.keystore.jks'
    keystore_pass: '{{ keystore_password }}'
    state: present
    cert_alias: '{{ cassandra_data.results[count].instance.hostname }}'
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count 

- name: add rootca to keystores clients
  community.general.java_cert:
    cert_content: '{{ ca_crt.certificate }}'
    keystore_path: '{{ cassandra_ssl_path }}client{{ item }}.keystore.jks'
    keystore_pass: '{{ keystore_password }}'
    state: present
    cert_alias: 'client{{ item }}.keystore.jks'
    owner: cassandra
    group: cassandra
  run_once: true
  with_sequence: count="{{ client_count }}"
  delegate_to: localhost

- name: add rootca to keystores internal clients
  community.general.java_cert:
    cert_content: '{{ ca_crt.certificate }}'
    keystore_path: '{{ cassandra_ssl_path }}{{ cassandra_data.results[count].instance.hostname }}client.keystore.jks'
    keystore_pass: '{{ keystore_password }}'
    state: present
    cert_alias: '{{ cassandra_data.results[count].instance.hostname }}client'
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count 
    
# create truststore (keytool) with client/server certs to single truststore (server.truststore.jks)

# establish chain of trust
- name: add ca to truststore
  community.general.java_cert:
    cert_path: '{{ cassandra_cacert }}'
    keystore_path: '{{ cassandra_truststore }}'
    keystore_pass: '{{ truststore_password }}'
    keystore_create: true
    state: present
    cert_alias: '{{ ca_common_name }}'
    trust_cacert: true
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: localhost

# - name: add server certs to truststore
#   community.general.java_cert:
#     cert_content: '{{ item.certificate }}'
#     keystore_path: '{{ cassandra_truststore }}'
#     keystore_pass: '{{ truststore_password }}'
#     keystore_create: true
#     state: present
#     cert_alias: '{{ cassandra_data.results[count].instance.hostname }}'
#     owner: cassandra
#     group: cassandra 
#   loop: "{{ server_certs.results }}"
#   loop_control:
#     index_var: count
#   run_once: true
#   delegate_to: localhost
      
# - name: add client certs to truststore
#   community.general.java_cert:
#     cert_path: '{{ cassandra_ssl_path }}/client{{ item }}.crt'
#     keystore_path: '{{ cassandra_truststore }}'
#     keystore_pass: '{{ truststore_password }}'
#     state: present
#     cert_alias: 'client{{ item }}'
#     owner: cassandra
#     group: cassandra    
#   with_sequence: count="{{ client_count }}"
#   run_once: true
#   delegate_to: localhost

# - name: add internal client certs to truststore
#   community.general.java_cert:
#     cert_content: '{{ item.certificate }}'
#     keystore_path: '{{ cassandra_truststore }}'
#     keystore_pass: '{{ truststore_password }}'
#     keystore_create: true
#     state: present
#     cert_alias: '{{ cassandra_data.results[count].instance.hostname }}client'
#     owner: cassandra
#     group: cassandra 
#   loop: "{{ internal_client_certs.results }}"
#   loop_control:
#     index_var: count
#   run_once: true
#   delegate_to: localhost

- name: propagate truststore to cluster 
  copy:
    src: '{{ cassandra_truststore }}'
    dest: '{{ cassandra_truststore }}'
    owner: cassandra
    group: cassandra
  delegate_to: localhost

# restart cassandra
- name: restart cassandra service
  systemd:
    name: cassandra
    state: restarted