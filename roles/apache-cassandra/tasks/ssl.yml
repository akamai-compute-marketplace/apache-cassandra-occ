---
# create cluster ssl certificates

# create cluster ssl directories
- name: create cassandra ssl directory
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: cassandra
    group: cassandra
  loop:
    - '{{ cassandra_ssl_directory }}'
    - '{{ cassandra_ssl_ca_directory }}'
    - '{{ cassandra_ssl_req_directory }}'
    - '{{ cassandra_ssl_key_directory }}'
    - '{{ cassandra_ssl_cert_directory }}'
    - '{{ cassandra_ssl_keystore_directory }}'
    - '{{ cassandra_ssl_truststore_directory }}'

# create root ca for signing
- name: generate ca key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_ssl_ca_directory }}/ca-key'
    passphrase: '{{ ca_password }}'
    cipher: auto
    return_content: true
    owner: cassandra
    group: cassandra
  no_log: true
  register: ca_key
  run_once: true
  delegate_to: localhost

- name: generate ca csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_ssl_ca_directory }}/ca-csr'
    privatekey_path: '{{ cassandra_ssl_ca_directory }}/ca-key'
    privatekey_passphrase: '{{ ca_password }}'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ ca_common_name }}'
    use_common_name_for_san: false
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
    key_usage_critical: true
    owner: cassandra
    group: cassandra
  register: ca_csr
  run_once: true
  delegate_to: localhost

- name: generate ca crt
  community.crypto.x509_certificate:
    path: '{{ cassandra_ssl_ca_directory }}/ca-crt'
    privatekey_path: '{{ cassandra_ssl_ca_directory }}/ca-key'
    privatekey_passphrase: '{{ ca_password }}'
    csr_path: '{{ cassandra_ssl_ca_directory }}/ca-csr'
    selfsigned_not_after: +3650d
    provider: selfsigned
    owner: cassandra
    group: cassandra
    mode: 0640
    return_content: true
  register: ca_crt
  run_once: true
  delegate_to: localhost

# generate ssl keys

- name: generate server key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_ssl_key_directory }}/{{ cassandra_data.server[count].instance.hostname }}.key'
    owner: cassandra
    group: cassandra
    mode: 0600
    return_content: true
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_ssl_key_directory }}/client{{ item }}.key'
    owner: cassandra
    group: cassandra
    mode: 0600
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

# generate csrs

- name: generate server csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_ssl_req_directory }}/{{ cassandra_data.server[count].instance.hostname }}.csr'
    privatekey_path: '{{ cassandra_ssl_key_directory }}/{{ cassandra_data.server[count].instance.hostname }}.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ cassandra_data.server[count].instance.hostname }}'
    use_common_name_for_san: false
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_ssl_req_directory }}/client{{ item }}.csr'
    privatekey_path: '{{ cassandra_ssl_key_directory }}/client{{ item }}.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: 'client{{ item }}'
    use_common_name_for_san: false
    owner: cassandra
    group: cassandra    
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

# sign cert with ca and get client cert

- name: generate server cert signed with ca cert
  community.crypto.x509_certificate:
    path: '{{ cassandra_ssl_cert_directory }}/{{ cassandra_data.server[count].instance.hostname }}.crt'
    privatekey_path: '{{ cassandra_ssl_key_directory }}/{{ cassandra_data.server[count].instance.hostname }}.key'
    csr_path: '{{ cassandra_ssl_req_directory }}/{{ cassandra_data.server[count].instance.hostname }}.csr'
    ownca_content: '{{ ca_crt.certificate }}'
    ownca_privatekey_content: '{{ ca_key.privatekey }}'
    ownca_privatekey_passphrase: '{{ ca_password }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: cassandra
    group: cassandra
    mode: 0640
    return_content: true
  register: server_certs
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client cert signed with ca cert
  community.crypto.x509_certificate:
    path: '{{ cassandra_ssl_cert_directory }}/client{{ item }}.crt'
    privatekey_path: '{{ cassandra_ssl_key_directory }}/client{{ item }}.key'
    csr_path: '{{ cassandra_ssl_req_directory }}/client{{ item }}.csr'
    ownca_path: '{{ cassandra_ssl_ca_directory }}/ca-crt'
    ownca_privatekey_path: '{{ cassandra_ssl_ca_directory }}/ca-key'
    ownca_privatekey_passphrase: '{{ ca_password }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: cassandra
    group: cassandra
    mode: 0640
    return_content: true
  register: client_certs
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

# generate pkcs12 file from cert keypair

- name: create server pcks12 file from
  community.crypto.openssl_pkcs12:
    path: '{{ cassandra_ssl_keystore_directory }}/{{ cassandra_data.server[count].instance.hostname }}-keystore.jks'
    friendly_name: '{{ cassandra_data.server[count].instance.hostname }}'
    privatekey_path: '{{ cassandra_ssl_key_directory }}/{{ cassandra_data.server[count].instance.hostname }}.key'
    certificate_path: '{{ cassandra_ssl_cert_directory }}/{{ cassandra_data.server[count].instance.hostname }}.crt'
    passphrase: '{{ keystore_password }}'
    action: export
    state: present
    owner: cassandra
    group: cassandra    
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count    

- name: create client pcks12 file from
  community.crypto.openssl_pkcs12:
    path: '{{ cassandra_ssl_keystore_directory }}/client{{ item }}-keystore.jks'
    friendly_name: 'client{{ item }}'
    privatekey_path: '{{ cassandra_ssl_key_directory }}/client{{ item }}.key'
    certificate_path: '{{ cassandra_ssl_cert_directory }}/client{{ item }}.crt'
    passphrase: '{{ keystore_password }}'
    action: export
    state: present
    owner: cassandra
    group: cassandra    
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: add ca to truststore
  community.general.java_cert:
    cert_path: '{{ cassandra_ssl_ca_directory }}/ca-crt'
    keystore_path: '{{ cassandra_ssl_truststore_directory }}/server.truststore.jks'
    keystore_pass: '{{ truststore_password }}'
    keystore_create: true
    state: present
    cert_alias: '{{ ca_common_name }}'
    trust_cacert: true
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: localhost

- name: propagate truststore to cluster 
  copy:
    src: '{{ cassandra_ssl_truststore_directory }}/server.truststore.jks'
    dest: '{{ cassandra_ssl_truststore_directory }}/server.truststore.jks'
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'][1:] }}"

# moving ca crt for local client connection with cqlsh
- name: propagate ca cert to cluster 
  copy:
    src: '{{ cassandra_ssl_ca_directory }}/ca-crt'
    dest: '{{ cassandra_ssl_ca_directory }}/ca-crt'
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'][1:] }}"