# create cluster ssl dir

- name: create ssl directory
  file:
    path: /etc/cassandra/ssl
    state: directory
    owner: cassandra
    group: cassandra
    mode: 0755

# create root ca for signing
- name: generate ca key
  community.crypto.openssl_privatekey:
    path: '{{ cassandra_cakey }}'
    passphrase: '{{ ca_password }}'
    cipher: auto
    return_content: true
    owner: cassandra
    group: cassandra
  no_log: true
  register: ca_key
  run_once: true
  delegate_to: localhost

- name: generate ca csr
  community.crypto.openssl_csr:
    path: '{{ cassandra_cacsr }}'
    privatekey_path: '{{ cassandra_cakey }}'
    privatekey_passphrase: '{{ ca_password }}'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ ca_common_name }}'
    use_common_name_for_san: false
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
    key_usage_critical: true
    owner: cassandra
    group: cassandra
  register: ca_csr
  run_once: true
  delegate_to: localhost

- name: generate ca crt
  community.crypto.x509_certificate:
    path: '{{ cassandra_cacert }}'
    privatekey_path: '{{ cassandra_cakey }}'
    privatekey_passphrase: '{{ ca_password }}'
    csr_path: '{{ cassandra_cacsr }}'
    selfsigned_not_after: +3650d
    provider: selfsigned
    owner: cassandra
    group: cassandra
    mode: '0640'
    return_content: true
  register: ca_crt
  run_once: true
  delegate_to: localhost

- name: propagate ca.crt to *
  copy:
    content: '{{ ca_crt.certificate }}'
    dest: '{{ cassandra_cacert }}'
    owner: cassandra
    group: cassandra
    mode: '0640'

- name: propagate ca.key to *
  copy:
    content: '{{ ca_key.privatekey }}'
    dest: '{{ cassandra_cakey }}'
    owner: cassandra
    group: cassandra
    mode: '0640'

# Generate public/private key pair and keystore for each node (one for each node in cluster)
- name: generate keypair
  command: >
    keytool -genkeypair -keyalg RSA \
    -alias "{{ cassandra_data.results[count].instance.hostname }}" \
    -keystore "{{ cassandra_data.results[count].instance.hostname }}-keystore.jks" \
    -storepass "{{ keystore_password }}" \
    -validity 3650 \
    -keysize 4096 \
    -dname "CN={{ item }}, OU=[{{ cluster_name }}]"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate keypair client
  command: >
    keytool -genkeypair -keyalg RSA \
    -alias "client{{ item }}" \
    -keystore "client{{ item }}.keystore.jks" \
    -storepass "{{ keystore_password }}" \
    -validity 3650 \
    -keysize 4096 \
    -dname "CN=client{{ item }}, OU=[{{ cluster_name }}]"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  with_sequence: count="{{ client_count }}"
  delegate_to: localhost

- name: generate keypair internal client
  command: >
    keytool -genkeypair -keyalg RSA \
    -alias "{{ cassandra_data.results[count].instance.hostname }}client" \
    -keystore "{{ cassandra_data.results[count].instance.hostname }}client-keystore.jks" \
    -storepass "{{ keystore_password }}" \
    -validity 3650 \
    -keysize 4096 \
    -dname "CN={{ item }}client, OU=[{{ cluster_name }}]"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# Export certificate signing request (CSR) for each node
- name: generate certreq
  command: >
    keytool -certreq
    -keystore "{{ cassandra_data.results[count].instance.hostname }}-keystore.jks"
    -alias "{{ cassandra_data.results[count].instance.hostname }}"
    -file "{{ cassandra_data.results[count].instance.hostname }}.csr"
    -storepass "{{ keystore_password }}"
    -dname "CN={{ item }}, OU=[{{ cluster_name }}]"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate certreq client
  command: >
    keytool -certreq
    -keystore "client{{ item }}.keystore.jks"
    -alias "client{{ item }}"
    -file "client{{ item }}.csr"
    -storepass "{{ keystore_password }}"
    -dname "CN=client{{ item }}, OU=[{{ cluster_name }}]"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  with_sequence: count="{{ client_count }}"
  delegate_to: localhost

- name: generate certreq internal client
  command: >
    keytool -certreq
    -keystore "{{ cassandra_data.results[count].instance.hostname }}client-keystore.jks"
    -alias "{{ cassandra_data.results[count].instance.hostname }}client"
    -file "{{ cassandra_data.results[count].instance.hostname }}client.csr"
    -storepass "{{ keystore_password }}"
    -dname "CN={{ item }}client, OU=[{{ cluster_name }}]"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: set ownership of /etc/cassandra/ssl recursively
  ansible.builtin.file:
    path: /etc/cassandra/ssl
    owner: cassandra
    group: cassandra
    recurse: yes

# sign node certificate with rootCa for each node
- name: generate client certificates
  command: >
    openssl x509 -req
    -CA "ca.crt"
    -CAkey "ca.key"
    -in "{{ cassandra_data.results[count].instance.hostname }}.csr"
    -out "{{ cassandra_data.results[count].instance.hostname }}.crt"
    -days 3650
    -CAcreateserial
    -passin pass:"{{ ca_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client certificates
  command: >
    openssl x509 -req
    -CA "ca.crt"
    -CAkey "ca.key"
    -in "client{{ item }}.csr"
    -out "client{{ item }}.crt"
    -days 3650
    -CAcreateserial
    -passin pass:"{{ ca_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  with_sequence: count="{{ client_count }}"
  delegate_to: localhost

- name: generate internal client certificates
  command: >
    openssl x509 -req
    -CA "ca.crt"
    -CAkey "ca.key"
    -in "{{ cassandra_data.results[count].instance.hostname }}client.csr"
    -out "{{ cassandra_data.results[count].instance.hostname }}client.crt"
    -days 3650
    -CAcreateserial
    -passin pass:"{{ ca_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# Import root ca certificate to each node keystore
- name: import keystore
  command: >
    keytool -importcert
    -keystore "{{ cassandra_data.results[count].instance.hostname }}-keystore.jks"
    -alias '{{ ca_common_name }}'
    -file 'ca.crt'
    -noprompt
    -storepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: import keystore clients
  command: >
    keytool -importcert
    -keystore "{{ cassandra_ssl_path }}client{{ item }}.keystore.jks"
    -alias "{{ ca_common_name }}"
    -file "{{ cassandra_cacert }}"
    -noprompt
    -storepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: import keystore internal clients
  command: >
    keytool -importcert
    -keystore "{{ cassandra_data.results[count].instance.hostname }}client-keystore.jks"
    -alias '{{ ca_common_name }}client'
    -file '{{ cassandra_cacert }}'
    -noprompt
    -storepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# Import node's signed certificate into node keystore for each node
- name: import signed certs
  command: >
    keytool -importcert
    -keystore "{{ cassandra_data.results[count].instance.hostname }}-keystore.jks"
    -alias "{{ cassandra_data.results[count].instance.hostname }}"
    -file "{{ cassandra_data.results[count].instance.hostname }}.crt"
    -noprompt
    -storepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: import client signed certs
  command: >
    keytool -importcert
    -keystore "client{{ item }}.keystore.jks"
    -alias "client{{ item }}"
    -file "client{{ item }}.crt"
    -noprompt
    -storepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: import internal client signed certs
  command: >
    keytool -importcert
    -keystore "{{ cassandra_data.results[count].instance.hostname }}client-keystore.jks"
    -alias "{{ cassandra_data.results[count].instance.hostname }}client"
    -file "{{ cassandra_data.results[count].instance.hostname }}client.crt"
    -noprompt
    -storepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# client keystore > pkcs12
# needed to use cqlsh, keystores are commonly used for java drivers
- name: convert client keystore to pk12
  command: >
    keytool -importkeystore
    -srckeystore "client{{ item }}.keystore.jks"
    -destkeystore "client{{ item }}.p12"
    -deststoretype PKCS12
    -srcstorepass "{{ keystore_password }}"
    -deststorepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  with_sequence: count="{{ client_count }}"
  run_once: true
  delegate_to: localhost

- name: convert internal client keystore to pk12
  command: >
    keytool -importkeystore
    -srckeystore "{{ cassandra_data.results[count].instance.hostname }}client-keystore.jks"
    -destkeystore "{{ cassandra_data.results[count].instance.hostname }}client.p12"
    -deststoretype PKCS12
    -srcstorepass "{{ keystore_password }}"
    -deststorepass "{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client pem cert
  command: >
    openssl pkcs12
    -in "client{{ item }}.p12"
    -nokeys 
    -out "client{{ item }}.cert.pem"
    -passin pass:"{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  with_sequence: count="{{ client_count }}"
  delegate_to: localhost

- name: generate internal client pem cert
  command: >
    openssl pkcs12
    -in "{{ cassandra_data.results[count].instance.hostname }}client.p12"
    -nokeys 
    -out "{{ cassandra_data.results[count].instance.hostname }}client.cert.pem"
    -passin pass:"{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

- name: generate client pem key
  command: >
    openssl pkcs12
    -in "client{{ item }}.p12"
    -nodes -nocerts 
    -out "client{{ item }}.cert.key"
    -passin pass:"{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  with_sequence: count="{{ client_count }}"
  delegate_to: localhost

- name: generate internal client pem key
  command: >
    openssl pkcs12
    -in "{{ cassandra_data.results[count].instance.hostname }}client.p12"
    -nodes -nocerts
    -out "{{ cassandra_data.results[count].instance.hostname }}client.key.pem"
    -passin pass:"{{ keystore_password }}"
  args:
    chdir: "{{ cassandra_ssl_path }}"
  run_once: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['cassandra_servers'] }}"
  loop_control:
    index_var: count

# Truststore
- name: add ca to truststore
  community.general.java_cert:
    cert_path: '{{ cassandra_cacert }}'
    keystore_path: '{{ cassandra_truststore }}'
    keystore_pass: '{{ truststore_password }}'
    keystore_create: true
    state: present
    cert_alias: '{{ ca_common_name }}'
    trust_cacert: true
    owner: cassandra
    group: cassandra
  run_once: true
  delegate_to: localhost

- name: propagate truststore to cluster
  copy:
    src: '{{ cassandra_truststore }}'
    dest: '{{ cassandra_truststore }}'
    owner: cassandra
    group: cassandra

# restart cassandra
- name: restart cassandra service
  systemd:
    name: cassandra
    state: started